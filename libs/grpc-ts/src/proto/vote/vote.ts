// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.0
//   protoc               v6.30.2
// source: proto/vote/vote.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Choice } from "../choice/choice";

export enum Owner {
  USER = 0,
  ESC = 1,
  ISESC = 2,
  UNRECOGNIZED = -1,
}

export function ownerFromJSON(object: any): Owner {
  switch (object) {
    case 0:
    case "USER":
      return Owner.USER;
    case 1:
    case "ESC":
      return Owner.ESC;
    case 2:
    case "ISESC":
      return Owner.ISESC;
    case -1:
    case "UNRECOGNIZED":
    default:
      return Owner.UNRECOGNIZED;
  }
}

export function ownerToJSON(object: Owner): string {
  switch (object) {
    case Owner.USER:
      return "USER";
    case Owner.ESC:
      return "ESC";
    case Owner.ISESC:
      return "ISESC";
    case Owner.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface CreateVoteRequest {
  oidcId: string;
  vote: Vote | undefined;
  choices: Choice[];
}

export interface CreateVoteResponse {
}

export interface GetVoteByIdRequest {
  id: number;
}

export interface GetVoteByIdResponse {
  vote: Vote | undefined;
  choices: Choice[];
}

export interface GetVoteBySlugRequest {
  slug: string;
}

export interface GetVoteBySlugResponse {
  vote: Vote | undefined;
  choices: Choice[];
}

export interface GetVotesRequest {
}

export interface GetVotesResponse {
  votes: Votes[];
}

export interface GetVotesByUserEligibilityRequest {
  oidcId: string;
}

export interface GetVotesByUserEligibilityResponse {
  votes: Votes[];
}

export interface Vote {
  name: string;
  description: string;
  slug: string;
  image?: string | undefined;
  owner: Owner;
  eligibleStudentId: string;
  eligibleDepartment: string;
  eligibleYear: string;
  isPrivate: boolean;
  isRealTime: boolean;
  isAllowMultiple: boolean;
  startAt: string;
  endAt: string;
  tally?: Tally | undefined;
}

export interface Votes {
  vote: Vote | undefined;
  choices: Choice[];
}

export interface Tally {
  choices: TallyChoices[];
  total: number;
}

export interface TallyChoices {
  number: string;
  count: number;
}

function createBaseCreateVoteRequest(): CreateVoteRequest {
  return { oidcId: "", vote: undefined, choices: [] };
}

export const CreateVoteRequest: MessageFns<CreateVoteRequest> = {
  encode(message: CreateVoteRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.oidcId !== "") {
      writer.uint32(10).string(message.oidcId);
    }
    if (message.vote !== undefined) {
      Vote.encode(message.vote, writer.uint32(18).fork()).join();
    }
    for (const v of message.choices) {
      Choice.encode(v!, writer.uint32(26).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateVoteRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateVoteRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.oidcId = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.vote = Vote.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.choices.push(Choice.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateVoteRequest {
    return {
      oidcId: isSet(object.oidcId) ? globalThis.String(object.oidcId) : "",
      vote: isSet(object.vote) ? Vote.fromJSON(object.vote) : undefined,
      choices: globalThis.Array.isArray(object?.choices) ? object.choices.map((e: any) => Choice.fromJSON(e)) : [],
    };
  },

  toJSON(message: CreateVoteRequest): unknown {
    const obj: any = {};
    if (message.oidcId !== "") {
      obj.oidcId = message.oidcId;
    }
    if (message.vote !== undefined) {
      obj.vote = Vote.toJSON(message.vote);
    }
    if (message.choices?.length) {
      obj.choices = message.choices.map((e) => Choice.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateVoteRequest>, I>>(base?: I): CreateVoteRequest {
    return CreateVoteRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateVoteRequest>, I>>(object: I): CreateVoteRequest {
    const message = createBaseCreateVoteRequest();
    message.oidcId = object.oidcId ?? "";
    message.vote = (object.vote !== undefined && object.vote !== null) ? Vote.fromPartial(object.vote) : undefined;
    message.choices = object.choices?.map((e) => Choice.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateVoteResponse(): CreateVoteResponse {
  return {};
}

export const CreateVoteResponse: MessageFns<CreateVoteResponse> = {
  encode(_: CreateVoteResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateVoteResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateVoteResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): CreateVoteResponse {
    return {};
  },

  toJSON(_: CreateVoteResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateVoteResponse>, I>>(base?: I): CreateVoteResponse {
    return CreateVoteResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateVoteResponse>, I>>(_: I): CreateVoteResponse {
    const message = createBaseCreateVoteResponse();
    return message;
  },
};

function createBaseGetVoteByIdRequest(): GetVoteByIdRequest {
  return { id: 0 };
}

export const GetVoteByIdRequest: MessageFns<GetVoteByIdRequest> = {
  encode(message: GetVoteByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetVoteByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetVoteByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetVoteByIdRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: GetVoteByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetVoteByIdRequest>, I>>(base?: I): GetVoteByIdRequest {
    return GetVoteByIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetVoteByIdRequest>, I>>(object: I): GetVoteByIdRequest {
    const message = createBaseGetVoteByIdRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseGetVoteByIdResponse(): GetVoteByIdResponse {
  return { vote: undefined, choices: [] };
}

export const GetVoteByIdResponse: MessageFns<GetVoteByIdResponse> = {
  encode(message: GetVoteByIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.vote !== undefined) {
      Vote.encode(message.vote, writer.uint32(10).fork()).join();
    }
    for (const v of message.choices) {
      Choice.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetVoteByIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetVoteByIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.vote = Vote.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.choices.push(Choice.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetVoteByIdResponse {
    return {
      vote: isSet(object.vote) ? Vote.fromJSON(object.vote) : undefined,
      choices: globalThis.Array.isArray(object?.choices) ? object.choices.map((e: any) => Choice.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetVoteByIdResponse): unknown {
    const obj: any = {};
    if (message.vote !== undefined) {
      obj.vote = Vote.toJSON(message.vote);
    }
    if (message.choices?.length) {
      obj.choices = message.choices.map((e) => Choice.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetVoteByIdResponse>, I>>(base?: I): GetVoteByIdResponse {
    return GetVoteByIdResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetVoteByIdResponse>, I>>(object: I): GetVoteByIdResponse {
    const message = createBaseGetVoteByIdResponse();
    message.vote = (object.vote !== undefined && object.vote !== null) ? Vote.fromPartial(object.vote) : undefined;
    message.choices = object.choices?.map((e) => Choice.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetVoteBySlugRequest(): GetVoteBySlugRequest {
  return { slug: "" };
}

export const GetVoteBySlugRequest: MessageFns<GetVoteBySlugRequest> = {
  encode(message: GetVoteBySlugRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.slug !== "") {
      writer.uint32(10).string(message.slug);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetVoteBySlugRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetVoteBySlugRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetVoteBySlugRequest {
    return { slug: isSet(object.slug) ? globalThis.String(object.slug) : "" };
  },

  toJSON(message: GetVoteBySlugRequest): unknown {
    const obj: any = {};
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetVoteBySlugRequest>, I>>(base?: I): GetVoteBySlugRequest {
    return GetVoteBySlugRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetVoteBySlugRequest>, I>>(object: I): GetVoteBySlugRequest {
    const message = createBaseGetVoteBySlugRequest();
    message.slug = object.slug ?? "";
    return message;
  },
};

function createBaseGetVoteBySlugResponse(): GetVoteBySlugResponse {
  return { vote: undefined, choices: [] };
}

export const GetVoteBySlugResponse: MessageFns<GetVoteBySlugResponse> = {
  encode(message: GetVoteBySlugResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.vote !== undefined) {
      Vote.encode(message.vote, writer.uint32(10).fork()).join();
    }
    for (const v of message.choices) {
      Choice.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetVoteBySlugResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetVoteBySlugResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.vote = Vote.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.choices.push(Choice.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetVoteBySlugResponse {
    return {
      vote: isSet(object.vote) ? Vote.fromJSON(object.vote) : undefined,
      choices: globalThis.Array.isArray(object?.choices) ? object.choices.map((e: any) => Choice.fromJSON(e)) : [],
    };
  },

  toJSON(message: GetVoteBySlugResponse): unknown {
    const obj: any = {};
    if (message.vote !== undefined) {
      obj.vote = Vote.toJSON(message.vote);
    }
    if (message.choices?.length) {
      obj.choices = message.choices.map((e) => Choice.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetVoteBySlugResponse>, I>>(base?: I): GetVoteBySlugResponse {
    return GetVoteBySlugResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetVoteBySlugResponse>, I>>(object: I): GetVoteBySlugResponse {
    const message = createBaseGetVoteBySlugResponse();
    message.vote = (object.vote !== undefined && object.vote !== null) ? Vote.fromPartial(object.vote) : undefined;
    message.choices = object.choices?.map((e) => Choice.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetVotesRequest(): GetVotesRequest {
  return {};
}

export const GetVotesRequest: MessageFns<GetVotesRequest> = {
  encode(_: GetVotesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetVotesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetVotesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): GetVotesRequest {
    return {};
  },

  toJSON(_: GetVotesRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<GetVotesRequest>, I>>(base?: I): GetVotesRequest {
    return GetVotesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetVotesRequest>, I>>(_: I): GetVotesRequest {
    const message = createBaseGetVotesRequest();
    return message;
  },
};

function createBaseGetVotesResponse(): GetVotesResponse {
  return { votes: [] };
}

export const GetVotesResponse: MessageFns<GetVotesResponse> = {
  encode(message: GetVotesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.votes) {
      Votes.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetVotesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetVotesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.votes.push(Votes.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetVotesResponse {
    return { votes: globalThis.Array.isArray(object?.votes) ? object.votes.map((e: any) => Votes.fromJSON(e)) : [] };
  },

  toJSON(message: GetVotesResponse): unknown {
    const obj: any = {};
    if (message.votes?.length) {
      obj.votes = message.votes.map((e) => Votes.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetVotesResponse>, I>>(base?: I): GetVotesResponse {
    return GetVotesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetVotesResponse>, I>>(object: I): GetVotesResponse {
    const message = createBaseGetVotesResponse();
    message.votes = object.votes?.map((e) => Votes.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetVotesByUserEligibilityRequest(): GetVotesByUserEligibilityRequest {
  return { oidcId: "" };
}

export const GetVotesByUserEligibilityRequest: MessageFns<GetVotesByUserEligibilityRequest> = {
  encode(message: GetVotesByUserEligibilityRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.oidcId !== "") {
      writer.uint32(10).string(message.oidcId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetVotesByUserEligibilityRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetVotesByUserEligibilityRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.oidcId = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetVotesByUserEligibilityRequest {
    return { oidcId: isSet(object.oidcId) ? globalThis.String(object.oidcId) : "" };
  },

  toJSON(message: GetVotesByUserEligibilityRequest): unknown {
    const obj: any = {};
    if (message.oidcId !== "") {
      obj.oidcId = message.oidcId;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetVotesByUserEligibilityRequest>, I>>(
    base?: I,
  ): GetVotesByUserEligibilityRequest {
    return GetVotesByUserEligibilityRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetVotesByUserEligibilityRequest>, I>>(
    object: I,
  ): GetVotesByUserEligibilityRequest {
    const message = createBaseGetVotesByUserEligibilityRequest();
    message.oidcId = object.oidcId ?? "";
    return message;
  },
};

function createBaseGetVotesByUserEligibilityResponse(): GetVotesByUserEligibilityResponse {
  return { votes: [] };
}

export const GetVotesByUserEligibilityResponse: MessageFns<GetVotesByUserEligibilityResponse> = {
  encode(message: GetVotesByUserEligibilityResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.votes) {
      Votes.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetVotesByUserEligibilityResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetVotesByUserEligibilityResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.votes.push(Votes.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetVotesByUserEligibilityResponse {
    return { votes: globalThis.Array.isArray(object?.votes) ? object.votes.map((e: any) => Votes.fromJSON(e)) : [] };
  },

  toJSON(message: GetVotesByUserEligibilityResponse): unknown {
    const obj: any = {};
    if (message.votes?.length) {
      obj.votes = message.votes.map((e) => Votes.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetVotesByUserEligibilityResponse>, I>>(
    base?: I,
  ): GetVotesByUserEligibilityResponse {
    return GetVotesByUserEligibilityResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetVotesByUserEligibilityResponse>, I>>(
    object: I,
  ): GetVotesByUserEligibilityResponse {
    const message = createBaseGetVotesByUserEligibilityResponse();
    message.votes = object.votes?.map((e) => Votes.fromPartial(e)) || [];
    return message;
  },
};

function createBaseVote(): Vote {
  return {
    name: "",
    description: "",
    slug: "",
    image: undefined,
    owner: 0,
    eligibleStudentId: "",
    eligibleDepartment: "",
    eligibleYear: "",
    isPrivate: false,
    isRealTime: false,
    isAllowMultiple: false,
    startAt: "",
    endAt: "",
    tally: undefined,
  };
}

export const Vote: MessageFns<Vote> = {
  encode(message: Vote, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.slug !== "") {
      writer.uint32(26).string(message.slug);
    }
    if (message.image !== undefined) {
      writer.uint32(34).string(message.image);
    }
    if (message.owner !== 0) {
      writer.uint32(40).int32(message.owner);
    }
    if (message.eligibleStudentId !== "") {
      writer.uint32(50).string(message.eligibleStudentId);
    }
    if (message.eligibleDepartment !== "") {
      writer.uint32(58).string(message.eligibleDepartment);
    }
    if (message.eligibleYear !== "") {
      writer.uint32(66).string(message.eligibleYear);
    }
    if (message.isPrivate !== false) {
      writer.uint32(72).bool(message.isPrivate);
    }
    if (message.isRealTime !== false) {
      writer.uint32(80).bool(message.isRealTime);
    }
    if (message.isAllowMultiple !== false) {
      writer.uint32(88).bool(message.isAllowMultiple);
    }
    if (message.startAt !== "") {
      writer.uint32(98).string(message.startAt);
    }
    if (message.endAt !== "") {
      writer.uint32(106).string(message.endAt);
    }
    if (message.tally !== undefined) {
      Tally.encode(message.tally, writer.uint32(114).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Vote {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVote();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.slug = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.image = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.owner = reader.int32() as any;
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.eligibleStudentId = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.eligibleDepartment = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.eligibleYear = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 72) {
            break;
          }

          message.isPrivate = reader.bool();
          continue;
        }
        case 10: {
          if (tag !== 80) {
            break;
          }

          message.isRealTime = reader.bool();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.isAllowMultiple = reader.bool();
          continue;
        }
        case 12: {
          if (tag !== 98) {
            break;
          }

          message.startAt = reader.string();
          continue;
        }
        case 13: {
          if (tag !== 106) {
            break;
          }

          message.endAt = reader.string();
          continue;
        }
        case 14: {
          if (tag !== 114) {
            break;
          }

          message.tally = Tally.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Vote {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      slug: isSet(object.slug) ? globalThis.String(object.slug) : "",
      image: isSet(object.image) ? globalThis.String(object.image) : undefined,
      owner: isSet(object.owner) ? ownerFromJSON(object.owner) : 0,
      eligibleStudentId: isSet(object.eligibleStudentId) ? globalThis.String(object.eligibleStudentId) : "",
      eligibleDepartment: isSet(object.eligibleDepartment) ? globalThis.String(object.eligibleDepartment) : "",
      eligibleYear: isSet(object.eligibleYear) ? globalThis.String(object.eligibleYear) : "",
      isPrivate: isSet(object.isPrivate) ? globalThis.Boolean(object.isPrivate) : false,
      isRealTime: isSet(object.isRealTime) ? globalThis.Boolean(object.isRealTime) : false,
      isAllowMultiple: isSet(object.isAllowMultiple) ? globalThis.Boolean(object.isAllowMultiple) : false,
      startAt: isSet(object.startAt) ? globalThis.String(object.startAt) : "",
      endAt: isSet(object.endAt) ? globalThis.String(object.endAt) : "",
      tally: isSet(object.tally) ? Tally.fromJSON(object.tally) : undefined,
    };
  },

  toJSON(message: Vote): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.slug !== "") {
      obj.slug = message.slug;
    }
    if (message.image !== undefined) {
      obj.image = message.image;
    }
    if (message.owner !== 0) {
      obj.owner = ownerToJSON(message.owner);
    }
    if (message.eligibleStudentId !== "") {
      obj.eligibleStudentId = message.eligibleStudentId;
    }
    if (message.eligibleDepartment !== "") {
      obj.eligibleDepartment = message.eligibleDepartment;
    }
    if (message.eligibleYear !== "") {
      obj.eligibleYear = message.eligibleYear;
    }
    if (message.isPrivate !== false) {
      obj.isPrivate = message.isPrivate;
    }
    if (message.isRealTime !== false) {
      obj.isRealTime = message.isRealTime;
    }
    if (message.isAllowMultiple !== false) {
      obj.isAllowMultiple = message.isAllowMultiple;
    }
    if (message.startAt !== "") {
      obj.startAt = message.startAt;
    }
    if (message.endAt !== "") {
      obj.endAt = message.endAt;
    }
    if (message.tally !== undefined) {
      obj.tally = Tally.toJSON(message.tally);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Vote>, I>>(base?: I): Vote {
    return Vote.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Vote>, I>>(object: I): Vote {
    const message = createBaseVote();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.slug = object.slug ?? "";
    message.image = object.image ?? undefined;
    message.owner = object.owner ?? 0;
    message.eligibleStudentId = object.eligibleStudentId ?? "";
    message.eligibleDepartment = object.eligibleDepartment ?? "";
    message.eligibleYear = object.eligibleYear ?? "";
    message.isPrivate = object.isPrivate ?? false;
    message.isRealTime = object.isRealTime ?? false;
    message.isAllowMultiple = object.isAllowMultiple ?? false;
    message.startAt = object.startAt ?? "";
    message.endAt = object.endAt ?? "";
    message.tally = (object.tally !== undefined && object.tally !== null) ? Tally.fromPartial(object.tally) : undefined;
    return message;
  },
};

function createBaseVotes(): Votes {
  return { vote: undefined, choices: [] };
}

export const Votes: MessageFns<Votes> = {
  encode(message: Votes, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.vote !== undefined) {
      Vote.encode(message.vote, writer.uint32(10).fork()).join();
    }
    for (const v of message.choices) {
      Choice.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Votes {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVotes();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.vote = Vote.decode(reader, reader.uint32());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.choices.push(Choice.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Votes {
    return {
      vote: isSet(object.vote) ? Vote.fromJSON(object.vote) : undefined,
      choices: globalThis.Array.isArray(object?.choices) ? object.choices.map((e: any) => Choice.fromJSON(e)) : [],
    };
  },

  toJSON(message: Votes): unknown {
    const obj: any = {};
    if (message.vote !== undefined) {
      obj.vote = Vote.toJSON(message.vote);
    }
    if (message.choices?.length) {
      obj.choices = message.choices.map((e) => Choice.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Votes>, I>>(base?: I): Votes {
    return Votes.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Votes>, I>>(object: I): Votes {
    const message = createBaseVotes();
    message.vote = (object.vote !== undefined && object.vote !== null) ? Vote.fromPartial(object.vote) : undefined;
    message.choices = object.choices?.map((e) => Choice.fromPartial(e)) || [];
    return message;
  },
};

function createBaseTally(): Tally {
  return { choices: [], total: 0 };
}

export const Tally: MessageFns<Tally> = {
  encode(message: Tally, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.choices) {
      TallyChoices.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.total !== 0) {
      writer.uint32(16).uint32(message.total);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Tally {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTally();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.choices.push(TallyChoices.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.total = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Tally {
    return {
      choices: globalThis.Array.isArray(object?.choices)
        ? object.choices.map((e: any) => TallyChoices.fromJSON(e))
        : [],
      total: isSet(object.total) ? globalThis.Number(object.total) : 0,
    };
  },

  toJSON(message: Tally): unknown {
    const obj: any = {};
    if (message.choices?.length) {
      obj.choices = message.choices.map((e) => TallyChoices.toJSON(e));
    }
    if (message.total !== 0) {
      obj.total = Math.round(message.total);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Tally>, I>>(base?: I): Tally {
    return Tally.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Tally>, I>>(object: I): Tally {
    const message = createBaseTally();
    message.choices = object.choices?.map((e) => TallyChoices.fromPartial(e)) || [];
    message.total = object.total ?? 0;
    return message;
  },
};

function createBaseTallyChoices(): TallyChoices {
  return { number: "", count: 0 };
}

export const TallyChoices: MessageFns<TallyChoices> = {
  encode(message: TallyChoices, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.number !== "") {
      writer.uint32(10).string(message.number);
    }
    if (message.count !== 0) {
      writer.uint32(16).uint32(message.count);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): TallyChoices {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTallyChoices();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.number = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.count = reader.uint32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): TallyChoices {
    return {
      number: isSet(object.number) ? globalThis.String(object.number) : "",
      count: isSet(object.count) ? globalThis.Number(object.count) : 0,
    };
  },

  toJSON(message: TallyChoices): unknown {
    const obj: any = {};
    if (message.number !== "") {
      obj.number = message.number;
    }
    if (message.count !== 0) {
      obj.count = Math.round(message.count);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<TallyChoices>, I>>(base?: I): TallyChoices {
    return TallyChoices.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<TallyChoices>, I>>(object: I): TallyChoices {
    const message = createBaseTallyChoices();
    message.number = object.number ?? "";
    message.count = object.count ?? 0;
    return message;
  },
};

export type VoteServiceService = typeof VoteServiceService;
export const VoteServiceService = {
  createVote: {
    path: "/vote.VoteService/CreateVote",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateVoteRequest) => Buffer.from(CreateVoteRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateVoteRequest.decode(value),
    responseSerialize: (value: CreateVoteResponse) => Buffer.from(CreateVoteResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateVoteResponse.decode(value),
  },
  getVoteById: {
    path: "/vote.VoteService/GetVoteById",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetVoteByIdRequest) => Buffer.from(GetVoteByIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetVoteByIdRequest.decode(value),
    responseSerialize: (value: GetVoteByIdResponse) => Buffer.from(GetVoteByIdResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetVoteByIdResponse.decode(value),
  },
  getVoteBySlug: {
    path: "/vote.VoteService/GetVoteBySlug",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetVoteBySlugRequest) => Buffer.from(GetVoteBySlugRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetVoteBySlugRequest.decode(value),
    responseSerialize: (value: GetVoteBySlugResponse) => Buffer.from(GetVoteBySlugResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetVoteBySlugResponse.decode(value),
  },
  getVotes: {
    path: "/vote.VoteService/GetVotes",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetVotesRequest) => Buffer.from(GetVotesRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetVotesRequest.decode(value),
    responseSerialize: (value: GetVotesResponse) => Buffer.from(GetVotesResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetVotesResponse.decode(value),
  },
  getVotesByUserEligibility: {
    path: "/vote.VoteService/GetVotesByUserEligibility",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetVotesByUserEligibilityRequest) =>
      Buffer.from(GetVotesByUserEligibilityRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetVotesByUserEligibilityRequest.decode(value),
    responseSerialize: (value: GetVotesByUserEligibilityResponse) =>
      Buffer.from(GetVotesByUserEligibilityResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetVotesByUserEligibilityResponse.decode(value),
  },
} as const;

export interface VoteServiceServer extends UntypedServiceImplementation {
  createVote: handleUnaryCall<CreateVoteRequest, CreateVoteResponse>;
  getVoteById: handleUnaryCall<GetVoteByIdRequest, GetVoteByIdResponse>;
  getVoteBySlug: handleUnaryCall<GetVoteBySlugRequest, GetVoteBySlugResponse>;
  getVotes: handleUnaryCall<GetVotesRequest, GetVotesResponse>;
  getVotesByUserEligibility: handleUnaryCall<GetVotesByUserEligibilityRequest, GetVotesByUserEligibilityResponse>;
}

export interface VoteServiceClient extends Client {
  createVote(
    request: CreateVoteRequest,
    callback: (error: ServiceError | null, response: CreateVoteResponse) => void,
  ): ClientUnaryCall;
  createVote(
    request: CreateVoteRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateVoteResponse) => void,
  ): ClientUnaryCall;
  createVote(
    request: CreateVoteRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateVoteResponse) => void,
  ): ClientUnaryCall;
  getVoteById(
    request: GetVoteByIdRequest,
    callback: (error: ServiceError | null, response: GetVoteByIdResponse) => void,
  ): ClientUnaryCall;
  getVoteById(
    request: GetVoteByIdRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetVoteByIdResponse) => void,
  ): ClientUnaryCall;
  getVoteById(
    request: GetVoteByIdRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetVoteByIdResponse) => void,
  ): ClientUnaryCall;
  getVoteBySlug(
    request: GetVoteBySlugRequest,
    callback: (error: ServiceError | null, response: GetVoteBySlugResponse) => void,
  ): ClientUnaryCall;
  getVoteBySlug(
    request: GetVoteBySlugRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetVoteBySlugResponse) => void,
  ): ClientUnaryCall;
  getVoteBySlug(
    request: GetVoteBySlugRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetVoteBySlugResponse) => void,
  ): ClientUnaryCall;
  getVotes(
    request: GetVotesRequest,
    callback: (error: ServiceError | null, response: GetVotesResponse) => void,
  ): ClientUnaryCall;
  getVotes(
    request: GetVotesRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetVotesResponse) => void,
  ): ClientUnaryCall;
  getVotes(
    request: GetVotesRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetVotesResponse) => void,
  ): ClientUnaryCall;
  getVotesByUserEligibility(
    request: GetVotesByUserEligibilityRequest,
    callback: (error: ServiceError | null, response: GetVotesByUserEligibilityResponse) => void,
  ): ClientUnaryCall;
  getVotesByUserEligibility(
    request: GetVotesByUserEligibilityRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetVotesByUserEligibilityResponse) => void,
  ): ClientUnaryCall;
  getVotesByUserEligibility(
    request: GetVotesByUserEligibilityRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetVotesByUserEligibilityResponse) => void,
  ): ClientUnaryCall;
}

export const VoteServiceClient = makeGenericClientConstructor(VoteServiceService, "vote.VoteService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): VoteServiceClient;
  service: typeof VoteServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
